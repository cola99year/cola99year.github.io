(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{402:function(t,s,a){"use strict";a.r(s);var n=a(3),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"一、equals-方法与"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、equals-方法与"}},[t._v("#")]),t._v(" 一、equals()方法与==")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("Objects")]),t._v(".equals：用于比较 2 个对象的"),s("strong",[t._v("内存地址")]),t._v("是否相等。"),s("strong",[t._v("String 类")]),t._v("对该方法进行了重写，以用于比较字符串的值是否相等。")]),t._v(" "),s("p",[t._v("而对于八种基本类型，相同的内容在栈内存中地址相同，equals方法返回为"),s("strong",[t._v("true")])]),t._v(" "),s("p",[t._v("如果类型不同的话，equals方法那肯定返回为"),s("strong",[t._v("false")]),t._v("了")])]),t._v(" "),s("p",[t._v("在使用 Objects.equals 方法判断两个值是否相等时，一定要保证两个入参的类型要一致。否则即使两个值相同，但其结果仍然会返回 false，这是一个大坑。")]),t._v(" "),s("p",[t._v("不一致咋办？")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1L")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//long转为int，或者对a转成long")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Objects")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//结果：true")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("==比较的是地址")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//地址相同才相同")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("文章阅读：来自菜鸟教程哟！")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s/6cfIQbXg67rifrQhkp5ByA",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://mp.weixin.qq.com/s/6cfIQbXg67rifrQhkp5ByA"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"二、continue与break与return"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、continue与break与return"}},[t._v("#")]),t._v(" 二、continue与break与return")]),t._v(" "),s("p",[t._v("1、continue是跳出本次循环，而不是终止整个循环")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        # 跳出本次循环，不打印"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("，整个循环还继续\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("2、break是终止整个循环")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        # 跳终止整个循环，"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("以及"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("后面的都不再打印\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("3、return则终止整个方法")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//用来反转整个链表")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reverse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//判断当前链表是否为空链表，如果是空链表，则结束运行，如果不是，则调用重载的reverse方法完成反转")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEmpty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reverse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"三、递归"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、递归"}},[t._v("#")]),t._v(" 三、递归")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:""}},[t._v("定义")]),t._v("：递归就是：方法A调用方法A，自己调用自己。")]),t._v(" "),s("p",[s("a",{attrs:{href:""}},[t._v("作用")]),t._v("：把"),s("strong",[t._v("大规模问题")]),t._v("化为"),s("strong",[t._v("与原问题规模相似的小规模问题")]),t._v("，少量的程序就可描述出解题过程所需的"),s("strong",[t._v("多次重复运算")]),t._v("。")]),t._v(" "),s("p",[s("a",{attrs:{href:""}},[t._v("注意事项")]),t._v("：")]),t._v(" "),s("p",[t._v("在递归中，不能无限制的调用自己，"),s("strong",[t._v("必须要有边界条件，能够让递归结束")]),t._v("，因为每一次递归调用都"),s("strong",[t._v("会在栈内存开辟")]),t._v("新的空间，重新执行方法，如果递归的层级太深，很容易造成栈内存溢出。")]),t._v(" "),s("p",[s("a",{attrs:{href:""}},[t._v("递归结构")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("递归头：递归的尽头，定义递归什么时候不再递归。例如阶乘中，当n=1时，就是递归头")]),t._v(" "),s("li",[t._v("递归体：什么时候需要调用自己")])])]),t._v(" "),s("h2",{attrs:{id:"四、值传递与引用传递"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、值传递与引用传递"}},[t._v("#")]),t._v(" 四、值传递与引用传递")]),t._v(" "),s("p",[t._v("值传递：java只有值传递就是定义的变量（int a；）传递给方法里的参数say (int a)")]),t._v(" "),s("h2",{attrs:{id:"五、创建对象的几种方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、创建对象的几种方式"}},[t._v("#")]),t._v(" 五、创建对象的几种方式")]),t._v(" "),s("ol",[s("li",[t._v("new")]),t._v(" "),s("li",[t._v("反射（类派发一个对象）："),s("code",[t._v("GirlFriend.class.newInstance();")])]),t._v(" "),s("li",[t._v("克隆（浅拷贝，使用克隆的好处就是可以快速创建一个和原对象值一样的对象，对象的字段值一样，但是两个不同的引用）："),s("code",[t._v("(GirlFriend) girlFriend1.clone();")])]),t._v(" "),s("li",[t._v("反序列化【见IO流板块】")])]),t._v(" "),s("p",[t._v("参考文章："),s("a",{attrs:{href:"https://www.jb51.net/article/237738.htm#_lab2_1_1",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java中创建对象的6种方式_java_脚本之家 (jb51.net)"),s("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);