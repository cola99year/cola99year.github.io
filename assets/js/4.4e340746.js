(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{337:function(t,s,a){t.exports=a.p+"assets/img/image-20230525114415247.961fc51d.png"},338:function(t,s,a){t.exports=a.p+"assets/img/image-20230525114431629.34ae0b1f.png"},339:function(t,s,a){t.exports=a.p+"assets/img/image-20230613202544288.c02499ff.png"},340:function(t,s,a){t.exports=a.p+"assets/img/image-20230613202443202.ef5c8045.png"},341:function(t,s,a){t.exports=a.p+"assets/img/image-20230525114519334.78d85714.png"},342:function(t,s,a){t.exports=a.p+"assets/img/0222.8ffdb35b.gif"},343:function(t,s,a){t.exports=a.p+"assets/img/02221.cba16713.gif"},344:function(t,s,a){t.exports=a.p+"assets/img/image-20230525114548266.b9f43fbf.png"},406:function(t,s,a){"use strict";a.r(s);var n=a(3),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1-静态与非静态方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-静态与非静态方法"}},[t._v("#")]),t._v(" 1. 静态与非静态方法")]),t._v(" "),s("p",[t._v("静态方法：")]),t._v(" "),s("p",[t._v("A类调用B类的静态方法不需要实例化，new Student（）；因为static修饰的方法归类所有，叫类的成员。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(337),alt:"image-20230525114415247"}})]),t._v(" "),s("p",[t._v("非静态方法：")]),t._v(" "),s("p",[t._v("老师类调用学生类的方法就要实例化一个学生对象出来！")]),t._v(" "),s("p",[s("img",{attrs:{src:a(338),alt:"image-20230525114431629"}})]),t._v(" "),s("hr"),t._v(" "),s("p",[s("strong",[t._v("总结")]),t._v("：")]),t._v(" "),s("ol",[s("li",[t._v("静态方法，静态的东西是和你创建的类一起加载的。")]),t._v(" "),s("li",[t._v("非静态方法是你的类实例化（new）之后才存在。")]),t._v(" "),s("li",[t._v("先存在的东西，不能调用后存在的东西，即静态方法不能调用非静态方法。")])]),t._v(" "),s("h2",{attrs:{id:"_2-方法的重载zai-同类同方法名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-方法的重载zai-同类同方法名"}},[t._v("#")]),t._v(" 2. 方法的重载zài（同类同方法名）")]),t._v(" "),s("blockquote",[s("p",[t._v("重载就是在同一个类中，"),s("strong",[t._v("有相同的方法名称，但形参不同的函数（个数不同，类型不同，排列顺序不同等）")]),t._v("，与"),s("strong",[t._v("方法的返回值类型")]),t._v("和"),s("strong",[t._v("访问权限")]),t._v("无关")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("copy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("copy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("copy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这个也是方法重载！")]),t._v("\n")])])]),s("p",[t._v("在使用时，编译器会匹配你要使用哪一个。")]),t._v(" "),s("h2",{attrs:{id:"_3-类的继承extends"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-类的继承extends"}},[t._v("#")]),t._v(" 3. 类的继承extends")]),t._v(" "),s("p",[t._v("子类继承了父类 ，就会拥有父类的全部方法，也拥有父类私有属性，但父类的私有修饰的无法访问而已。")]),t._v(" "),s("p",[t._v("与方法重写区分，与抽象和接口的implement区分。")]),t._v(" "),s("p",[t._v("继承而已，不需强制重写父类方法。")]),t._v(" "),s("h2",{attrs:{id:"_4-方法的重写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-方法的重写"}},[t._v("#")]),t._v(" 4. 方法的重写")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("方法的重载")]),t._v("：重载就是在一个类中，有相同的函数名称，但形参不同的函数。")]),t._v(" "),s("li",[s("strong",[t._v("方法的多态")]),t._v("：多态是父类指向子类，子类中有他独有的方法，父类调用的子类独有的方法，需转型。")]),t._v(" "),s("li",[s("strong",[t._v("方法的重写")]),t._v("：子类extends继承父类，子类可以选择性重写父类的方法。实现接口重写接口的方法等")])]),t._v(" "),s("p",[t._v("方法的重写：有父类指向子类的情况，调用普通方法会"),s("strong",[t._v("优先使用子类重写父类的方法，没有再往父类找，跟原型链那样。如下图所示")])]),t._v(" "),s("h3",{attrs:{id:"_1重写非静态方法时"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1重写非静态方法时"}},[t._v("#")]),t._v(" ①重写非静态方法时")]),t._v(" "),s("p",[t._v("子类有重写了，就用子类；")]),t._v(" "),s("p",[t._v("子类没有重写，用父类，b属于B类，但是先用子类的方法。")]),t._v(" "),s("p",[t._v("下图与下下图对比：")]),t._v(" "),s("p",[s("img",{attrs:{src:a(339),alt:"image-20230613202544288"}})]),t._v(" "),s("h3",{attrs:{id:"_2重写静态方法时-没事就不要写静态方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2重写静态方法时-没事就不要写静态方法"}},[t._v("#")]),t._v(" ②重写静态方法时(没事就不要写静态方法)")]),t._v(" "),s("p",[s("strong",[t._v("static修饰的方法归类所有，叫类的成员")]),t._v("，不叫对象的成员（详细可搜static关键字)。")]),t._v(" "),s("p",[t._v("因此，"),s("strong",[t._v("b属于B类，他用不了A类的静态方法，因此输出的是B的静态方法。")])]),t._v(" "),s("p",[s("img",{attrs:{src:a(340),alt:"image-20230613202443202"}})]),t._v(" "),s("h3",{attrs:{id:"_3总结-方法的重写遵守两同两小一大"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3总结-方法的重写遵守两同两小一大"}},[t._v("#")]),t._v(" ③总结：方法的重写遵守两同两小一大")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("两同："),s("strong",[t._v("方法名和参数类型要相同")]),t._v("；")])]),t._v(" "),s("li",[s("p",[t._v("两小："),s("strong",[t._v("返回的类型和异常：子<父")]),t._v("。抛出的异常，子类可以去缩小，但不能扩大。类型也是缩小，子返回的类型怎么回比父类还宽？不可能咯！")])]),t._v(" "),s("li",[s("p",[t._v("一大："),s("strong",[t._v("访问权限：子>父")]),t._v("。子类重写父类的方法，子类修饰范围可以扩大，但不能缩小（不要坑爹，把爹的权利搞小了）。public>protected>default>private")])])]),t._v(" "),s("h2",{attrs:{id:"_5-抽象类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-抽象类"}},[t._v("#")]),t._v(" 5. 抽象类")]),t._v(" "),s("p",[t._v("例如：IO流四大家族都是抽象类，都实现了java.io.Closeable接口，都有"),s("strong",[t._v("close()方法")]),t._v("，所以用完"),s("strong",[t._v("IO流要关闭")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[t._v("抽象类是局部抽象。抽象类是一种"),s("strong",[t._v("严格的is-a关系")]),t._v("，比如，学生是人，老师也是人")])]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:a(341),alt:"image-20230525114519334"}}),t._v(" "),s("blockquote",[s("p",[t._v("1."),s("strong",[t._v("抽象类不能实例化new")]),t._v("。即不能造对象了。如下图所示报红错误：")])]),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:a(342),alt:"0222"}}),t._v(" "),s("blockquote",[s("p",[t._v("2."),s("strong",[t._v("抽象类一定有构造器")]),t._v("。虽然抽象类不能拿构造器来自己new，但是子类要调用构造器。子类调用后，"),s("strong",[t._v("子类完成抽象类的具体相关操作")]),t._v("！")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"抽象类Animal无参构造器"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//此处执行前会默认执行super()")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"抽象类Animal有参构造器"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Horse")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Horse")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"子类horse无参构造器"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//此处执行前会默认执行super()")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Horse")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"子类horse有参构造器"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Horse")]),t._v(" h "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Horse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"---------------------"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v(" h2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Horse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//运行结果：")]),t._v("\n抽象类"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v("无参构造器\n子类horse无参构造器\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\n抽象类"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v("有参构造器\n子类horse有参构造器\n")])])]),s("blockquote",[s("p",[t._v("3.抽象方法长什么样？")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//不是抽象方法,有方法体")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//抽象方法没有方法体： {}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("4."),s("strong",[t._v("包含抽象方法的类，一定是一个抽象类。")])])]),t._v(" "),s("p",[t._v("抽象方法要求：不能让它【所在类的对象】调用。")]),t._v(" "),s("p",[t._v("如下图，抽象方法写在普通类是报错的，因为普通类可以new出对象。")]),t._v(" "),s("p",[t._v("因此加abstract变成抽象类，抽象类不能new，满足了抽象方法的要求，所以说"),s("strong",[t._v("包含抽象方法的类，一定是一个抽象类。")])]),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:a(343),alt:"02221"}}),t._v(" "),s("blockquote",[s("p",[t._v("5.反之，"),s("strong",[t._v("抽象类可以没有抽象方法，可以全是普通方法")]),t._v("。")])]),t._v(" "),s("blockquote",[s("p",[t._v("6."),s("strong",[t._v("子类extends了抽象类，必须重写抽象类的抽象方法，除非子类也是抽象类。")])])]),t._v(" "),s("p",[t._v("子类重写了，子类可以去实现重写方法的具体操作。")]),t._v(" "),s("p",[t._v("总结：")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("1、我为什么要用抽象类？")])])]),t._v(" "),s("p",[t._v("如果父类没有用抽象abstract，其方法没用抽象方法时候，那么当其子类有很多时，就会有某一个子类忘记重写方法的情况，")]),t._v(" "),s("p",[t._v("那么问题就出现了：可以正常运行，但是出现了一个功能没有实现情况，这个没有实现的功能就在你忘记重写的方法里。")]),t._v(" "),s("p",[t._v("你找可能就找不到出错了，是在哪一个子类，哪一个方法？")]),t._v(" "),s("p",[t._v("而当用抽象后，当其子类忘记复写时，就一定会出错，他会提示个抽象方法你必须重写。")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("2、抽象类的注意点")])])]),t._v(" "),s("ul",[s("li",[t._v("abstract不能用来修饰:属性、构造器等结构")]),t._v(" "),s("li",[t._v("abstract不能用来修饰私有方法、静态方法、final的方法、final的类")])]),t._v(" "),s("h2",{attrs:{id:"_6-接口implement"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-接口implement"}},[t._v("#")]),t._v(" 6. 接口implement")]),t._v(" "),s("blockquote",[s("p",[t._v("接口是全抽象。接口中的"),s("strong",[t._v("所有方法")]),t._v("都是抽象的（abstract），并自动地属于 "),s("strong",[s("code",[t._v("public")])]),t._v("，接口实现类必须implement接口，并重写所有他的方法，跟继承extends区分！")]),t._v(" "),s("ol",[s("li",[t._v("接口的"),s("strong",[t._v("方法默认修饰符是public abstract")]),t._v("；可以直接省略修饰符；")]),t._v(" "),s("li",[t._v("接口的变量(即属性)默认都是"),s("code",[t._v("public static final")]),t._v(" 的，可以直接省略修饰符；")])])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("接口根本不属于类，类只能是单继承，"),s("strong",[t._v("接口可以多继承")])])]),t._v(" "),s("li",[s("p",[t._v("抽象方法可以有public、protected和private这些修饰符。接口"),s("strong",[t._v("方法默认修饰符是public abstract")]),t._v("，接口里的接口方法"),s("strong",[t._v("都是抽象的")]),t._v("，实现类"),s("strong",[t._v("必须重写")]),t._v("接口的"),s("strong",[t._v("所有方法；")])])]),t._v(" "),s("li",[s("p",[t._v("接口是"),s("strong",[t._v("不能直接实例化的")]),t._v("，必须使用"),s("strong",[t._v("实现类来implement")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("接口在"),s("strong",[t._v("jdk1.8后")]),t._v("可以有自己方法的默认实现，"),s("strong",[t._v("实现方法须用default关键字")]),t._v("，这些default方法有"),s("code",[t._v("方法体{}")]),t._v("。")]),t._v(" "),s("p",[t._v("如果没写default，就会报错，如下图我把方法delete修饰符改为public报错，提示改成default：")])])]),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:a(344),alt:"image-20230525114548266"}}),t._v(" "),s("p",[t._v("例如"),s("code",[t._v("WebMvcConfigurer")]),t._v("接口，default修饰的方法，"),s("strong",[t._v("其实现类就不用强制重写接口的方法了")]),t._v("！！")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebMvcConfigurer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("configurePathMatch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PathMatchConfigurer")]),t._v(" configurer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("configureContentNegotiation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ContentNegotiationConfigurer")]),t._v(" configurer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ol",{attrs:{start:"5"}},[s("li",[s("strong",[t._v("static修饰")]),t._v("的接口静态方法，直接"),s("strong",[t._v("通过接口名称调用")]),t._v("静态方法")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyInterfaceStatic")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("methodStatic")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"这是接口的静态方法！"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("blockquote",[s("p",[s("strong",[t._v("为什么要用接口？")])])]),t._v(" "),s("ol",[s("li",[t._v("首先，java不支持多继承，但是"),s("strong",[t._v("支持实现多接口")]),t._v("，因此在使用如果"),s("strong",[t._v("仅仅使用抽象类会具有相当大的局限性")]),t._v("。\n抽象类是一种"),s("strong",[t._v("严格的is-a关系")]),t._v("，比如，学生是人，老师也是人；因此可以将学生和老师可以继承抽象类people。但接口更倾向于实现具有一些公共的特性或方法，"),s("strong",[t._v("是has-a 关系")]),t._v("比如学生会拍球，海豚也会拍球，因此学生和海豚都继承拍球方法的接口。")]),t._v(" "),s("li",[t._v("接口或者规范可以在开发过程中做到分离。")]),t._v(" "),s("li",[t._v("接口就如功能列表栏，一眼就能只能他可以实现什么功能。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);